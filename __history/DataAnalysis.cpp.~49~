//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include <stdio.h>
#include <time.h>
#include <systdate.h>

#include "DataAnalysis.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TfmAnalysis *fmAnalysis;
//---------------------------------------------------------------------------
bool DlgAnalyseData(TForm* Papa)
	{
	TfmAnalysis* Form = new TfmAnalysis(Papa);
	bool rc = false;

	if (Form)
		{
		rc = Form->Execute();
		delete Form;
		}
	return rc;
	}
//---------------------------------------------------------------------------
bool TfmAnalysis::Execute()
	{
	ShowModal();
	return true;
	}
//---------------------------------------------------------------------------
__fastcall TfmAnalysis::TfmAnalysis(TComponent* Owner)
	: TForm(Owner)
	{
	}
//---------------------------------------------------------------------------
__fastcall TfmAnalysis::~TfmAnalysis()
	{
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::FormShow(TObject *Sender)
	{
	tStartup->Enabled = true;
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::tStartupTimer(TObject *Sender)
	{
	tStartup->Enabled = false;
	ftools.FormLoad(this);
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::FormClose(TObject *Sender, TCloseAction &Action)
	{
	ftools.FormSave(this);
	}
//---------------------------------------------------------------------------
/***************************************************************************/
/******************   Funktionen   *****************************************/
/***************************************************************************/
//---------------------------------------------------------------------------
bool TfmAnalysis::DoPath(String path)
	{
	String search = path + "\\*.*";
	HANDLE fHandle;
	WIN32_FIND_DATA wfd;

	//Erste Datei im Verzeichnis holen: aufgrund von "alten Zeiten" ist das
	//erste immer ein "." kann also ignoriert werden.
	fHandle=FindFirstFile(search.c_str(), &wfd);

	//Ergebnis Nummer 2 ist auch uninteressant (ist ".."):
	FindNextFile(fHandle, &wfd);

	char f[MAX_PATH];
	char e[12];
	bool fehler = false;
	while (FindNextFile(fHandle, &wfd))
		{
		if (wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
			{
			//Verzeichnis gefunden, ggf. rekursiver Aufruf
			//Prüfen, ob es sich nicht um ein zu überspringendes Verzeichnis handelt
			String newpath = path + "\\" + wfd.cFileName;
			if (!DoPath(newpath))
				{
				fehler = true;
				break;
				}
			}
		else
			{
			strcpy(f, wfd.cFileName);
			char* pt = strrchr(f, '.');
			if (pt)
				*pt = 0;
			else //kein Punkt vorhanden -> ungültige Datei
				continue;

			sprintf(e, "%.11s", pt+1);

			if (String(e).LowerCase() != "txt")
				continue;

			String dat = path + "\\" + wfd.cFileName;
			if (!DoFile(dat, wfd.cFileName))
				{
				fehler = true;
				break;
				}
			}
		}

	FindClose(fHandle);
	return !fehler;
	}
//---------------------------------------------------------------------------
bool TfmAnalysis::DoFile(String file, String name)
	{
	//Datei einlesen und auswerten
	cData& data = fecg.data;
	if (!data.getFile(file, Format, Delim, 1, 3000))
		{
		//todo Print("## Fehler aufgetreten: %d, %s", data.error_code, data.error_msg);
		return false;
		}

	//-- Erste und zweite Ableitung
	if (!data.buildDerivates())
		{
		//todo Print("## Fehler aufgetreten: %d, %s", data.error_code, data.error_msg);
		return false;
		}

	farray.resetValues(data.derivate1.deriv_array, data.derivate1.farr_charac);
	double max = data.derivate1.farr_charac.MaxWert;
	double min = data.derivate1.farr_charac.MinWert;
	double rgn = max - min;

	char minval[32]; sprintf(minval, "%.8f", min);
	char maxval[32]; sprintf(maxval, "%.8f", max);
	char rgnval[32]; sprintf(rgnval, "%.8f", rgn);

	TListItem* item = lvData->Items->Add();
	item->Caption = name;
	item->SubItems->Add(String(minval));
	item->SubItems->Add(String(maxval));
	item->SubItems->Add(String(rgnval));

	return true;
	}
//---------------------------------------------------------------------------
void TfmAnalysis::Values()
	{
	//Minimum feststellen, dann alle daran messen
	if (lvData->Items->Count <= 0) return;
	TListItem* item = lvData->Items->Item[0];
	double min = atof(item->SubItems->Strings[2].c_str());

	double wert;
	for (int i = 0; i < lvData->Items->Count; i++)
		{
		item = lvData->Items->Item[i];
		wert = atof(item->SubItems->Strings[2].c_str());

		if (wert < min)
			min = wert;
		}

	double faktor; char fak[32];
	for (int i = 0; i < lvData->Items->Count; i++)
		{
		item = lvData->Items->Item[i];
		wert = atof(item->SubItems->Strings[2].c_str());

		if (wert == min)
			item->SubItems->Add("BEST RESULT");
		else
			{
			faktor = wert / min;
			sprintf(fak, "%.3f", faktor);
			item->SubItems->Add(String(fak));
			}
		}

	lvData->AlphaSort();
	}
//---------------------------------------------------------------------------
/***************************************************************************/
/********************   Actions   ******************************************/
/***************************************************************************/
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::acCloseExecute(TObject *Sender)
	{
	Close();
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::acLoadFileExecute(TObject *Sender)
	{
	if (OpenDialog->Execute())
		edInput->Text = OpenDialog->FileName;
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::acReadFileExecute(TObject *Sender)
	{
	String ecgPath = edInput->Text;
	if (ecgPath == "") return;

	//todo, über dyn Importschemata wählen lassen
	if (cbDelim->ItemIndex == 1) //Komma
		Delim = ",";
	else if (cbDelim->ItemIndex == 2) //Tab
		Delim = "\t";
	else
		Delim = ";";

	if (cbFormat->ItemIndex == 1)
		Format = formatADS;
	else
		Format = formatNone;

	lvData->Items->Clear();
	if (DoPath(ecgPath))
    	Values();
	}
//---------------------------------------------------------------------------
/***************************************************************************/
/**************   Meldungen vom Formular   *********************************/
/***************************************************************************/
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::FormKeyPress(TObject *Sender, char &Key)
	{
	if (Key == VK_ESCAPE)
		{
		Key = 0;
		acCloseExecute(Sender);
		}
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::btInputfileClick(TObject *Sender)
	{
	acLoadFileExecute(Sender);
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::acExportExecute(TObject *Sender)
	{
	//
	}
//---------------------------------------------------------------------------
void __fastcall TfmAnalysis::lvDataCompare(TObject *Sender, TListItem *Item1,
	  TListItem *Item2, int Data, int &Compare)
	{
	if (!Item1) return;
	if (!Item2) return;

	double wert1 = atof(Item1->SubItems->Strings[2].c_str());
	double wert2 = atof(Item2->SubItems->Strings[2].c_str());

	if (wert1 == wert2)
		Compare = 0;
	else if (wert1 > wert2)
		Compare = -0,5;
	else
    	Compare = 0.5;
	}
//---------------------------------------------------------------------------

