//---------------------------------------------------------------------------
#ifndef classACH
#define classACH
//---------------------------------------------------------------------------
#include <classes.hpp>
//---------------------------------------------------------------------------
#include "../basics/classBase.h"
//---------------------------------------------------------------------------
//typedef std::vector<float> float_vec_t; -> ist das gleiche wie: typedef std::vector<float> ilist_t;
//---------------------------------------------------------------------------
//! Die Klasse cAC bietet Funktionalitäten an, um eine Autokorrelation erstellen zu können
class PACKAGE cAC : public cBase
	{
public:
	cAC(); //! Konstruktor für cAC
	~cAC(); //! Destruktor für cAC

	//! Erstellt über dem übergebenen Array eine AC
	/*! Über dem übergebenen Array wird eine AC erstellt.
	 *  /param (std::map) array
	 *  /raturn (std::map) AC-Array
	 */
	iarray_t	buildAC(iarray_t array);

	//! Erstellt das AC-Template
	/*! Aus dem übergebenen Standardherzschlag wird eine AC gebildet und
	 *  zurückgegeben. Der aufrufende Algorithmus kümmert sich um Auswertung
	 *  und Speicherung usw.\r\n
	 *  Intern ruft createTemplate() die Funktion buildAC() auf.
	 *  /param (std::map) Standardherzschlag
	 *  /return (std::map) Template
	 */
	iarray_t	createTemplate(iarray_t herzschlag);

__property iarray_t temp = { read=get_template }:
private:
	iarray_t	ftemplate;
	iarray_t	get_template();

	iarray_t	buildACOld(iarray_t array);
	};
//---------------------------------------------------------------------------
#endif
