//http://sebastianraschka.com/Articles/2014_python_lda.html
//---------------------------------------------------------------------------
/* LDA - Linear Discriminant Analysis (Klassifizierungsalg.)
 * ==================================
 * AKTUELL NUR SIMULATION !!
 */
//---------------------------------------------------------------------------
#pragma hdrstop

//#include "opencv2/opencv.hpp"
//#include "opencv2/highgui/highgui.hpp"

#include <iostream>
#include <fstream>
#include <sstream>

/*
#include "subspace.hpp"
#include "fisherfaces.hpp"
#include "helper.hpp"
#include "decomposition.hpp"
*/

#include "classLDA.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------
cLDA::cLDA()
	{
	}
//---------------------------------------------------------------------------
cLDA::~cLDA()
	{
	}
//---------------------------------------------------------------------------
double cLDA::singleCheck(iarray_t temp1, iarray_t temp2, int mode)
	{
	//SIMULATION
	Randomize();
	double conformity = 0.0;
	double range = Random();

	if (mode == 0) //intra
		{
		//gleichmäßige Wahrscheinlichkeit
			 if (range >= 0.66) conformity = Random(33) * 3.33;
		else if (range >= 0.33) conformity = Random(33) * 2.22;
		else                    conformity = Random(33) * 1.11;
		}
	else if (mode == 1) //inter
		{
		//mittlere Wahrscheinlichkeit
			 if (range >= 0.88) conformity = Random(33) * 3.33;
		else if (range >= 0.66) conformity = Random(33) * 2.22;
		else                    conformity = Random(33) * 1.11;
		}
	else //kreuz
		{
		//niedrige Wahrscheinlichkeit
			 if (range >= 0.99) conformity = Random(33) * 3.33;
		else if (range >= 0.88) conformity = Random(33) * 2.22;
		else                    conformity = Random(33) * 1.11;
		}

	return conformity;
	}
//---------------------------------------------------------------------------
bool cLDA::testAlgLib()
	{
	//Fünf Schritte nach http://sebastianraschka.com/Articles/2014_python_lda.html
	/* Aim of LDA: The goal is to project a dataset onto a lower-dimensional
	 * space with good class-separability in order avoid overfitting.
	 */
	
	}
//---------------------------------------------------------------------------
