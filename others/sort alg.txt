iarray_t cMath::bubbleSort(iarray_t array, bool asc, TProgressBar* job)
	{
	//Werte sortieren: Im Bubble-Sort werden immer zwei Werte miteinander
	//verglichen und ggf. ausgetauscht. Problem "rabbits and turtles": Während
	//das größte Element (rabbit) schnell nach hinten gelangt, wird das kleinste
	//Element (turtle) pro Durchgang nur um eine Position nach vorne geschoben.
	iarray_t arr;
	arr.clear();
	arr = array;

	//todo: progressBar, anders lösen

	int n, i, zeit1, zeit2;
	float wert1, wert2;

	int last  = arr.size();
	bool swapped;
	if (job != NULL)
		{
		job->Max = last;
		job->Position = 0;
		}
		
	while (last > 0)
		{
		swapped = false;
		for (i = 0; i < last-1; i++) //vom ersten bis zum letzten Wert im Restfenster
			{
			zeit1 = arr[i][0];
			wert1 = arr[i][1];

			zeit2 = arr[i+1][0];
			wert2 = arr[i+1][1];

			if ((asc && (wert1 > wert2)) || (!asc && (wert1 < wert2)))
				{
				//swap values
				arr[i][0] = zeit2;
				arr[i][1] = wert2;

				arr[i+1][0] = zeit1;
				arr[i+1][1] = wert1;

				swapped = true;
				}
			}

		if (!swapped)
			{
			//es wurden keine Werte mehr geswappt, also können wir aufhören
			break;
			}

		last--;
		if (job != NULL) job->Position++;
		}

	if (job != NULL) job->Position = 0;
	return arr;
	}
//---------------------------------------------------------------------------
iarray_t cMath::shakerSort(iarray_t array, bool asc, TProgressBar* job)
	{
	//Werte sortieren: Erweiterung des Bubble-Sort, pro Iteration wird jeweils
	//ein vorwärts-Bubblesort und ein rückwärts-Bubblesort durchgeführt um das
	//"rabit and turtles" Problem zu umgehen.

	//ca. 20% schneller als Bubble-Sort
	iarray_t arr;
	arr.clear();
	arr = array;

	//todo: progressBar, anders lösen

	int n, i, zeit1, zeit2;
	float wert1, wert2;

	int last  = arr.size();
	int first = 0;

	bool swapped;
	if (job != NULL)
		{
		job->Max = last;
		job->Position = 0;
		}

	while (last > 0)
		{
		swapped = false;
		for (i = first; i < last-1; i++) //vorwärts-Bubble-Sort
			{
			zeit1 = arr[i][0];
			wert1 = arr[i][1];

			zeit2 = arr[i+1][0];
			wert2 = arr[i+1][1];

			if ((asc && (wert1 > wert2)) || (!asc && (wert1 < wert2)))
				{
				//swap values
				arr[i][0] = zeit2;
				arr[i][1] = wert2;

				arr[i+1][0] = zeit1;
				arr[i+1][1] = wert1;

				swapped = true;
				}
			}

		for (i = last-2; i > first; i--) //rückwärts-Bubble-Sort
			{
			zeit1 = arr[i][0];
			wert1 = arr[i][1];

			zeit2 = arr[i-1][0];
			wert2 = arr[i-1][1];

			if ((asc && (wert1 < wert2)) || (!asc && (wert1 > wert2)))
				{
				//swap values
				arr[i][0] = zeit2;
				arr[i][1] = wert2;

				arr[i-1][0] = zeit1;
				arr[i-1][1] = wert1;

				swapped = true;
				}
			}

		if (!swapped)
			{
			//es wurden keine Werte mehr geswappt, also können wir aufhören
			break;
			}

		last--;  //der letzte Spot wurde durch den Vorwärtsgang gesetzt
		first++; //der erste Spot wurde durch den Rückwärtsgang gesetzt
		
		if (job != NULL) job->Position++;
		}

	if (job != NULL) job->Position = 0;
	return arr;
	}
//---------------------------------------------------------------------------
iarray_t cMath::quickSort(iarray_t array, bool asc)
	{
	return array; //ACHTUNG: STACK OVERFLOW !! Maps sind zu groß !


	//Werte sortieren: Array in zwei Hälften teilen und für jede Hälfte
	//rekursiv wieder QuickSort aufrufen
	iarray_t lefti; lefti.clear();
	iarray_t right; right.clear();

	sArrayCha charac;
	farray.resetValues(array, charac);
	float pivot = charac.MinWert + ((charac.MaxWert - charac.MinWert)/2);

	int ixleft = 0;
	int ixright = 0;
	float wert, wert2;
	for (int i = 0; i < array.size(); i++)
		{
		wert = array[i][1];

		if (wert <= pivot) //linke Liste
			{
			lefti[ixleft].push_back(array[i][0]);
			lefti[ixleft].push_back(array[i][1]);
			ixleft++;
			}
		else //rechte Liste
			{
			right[ixright].push_back(array[i][0]);
			right[ixright].push_back(array[i][1]);
			ixright++;
			}
		}

	//rekursive quicksort
	if (lefti.size() > 1)
		lefti = quickSort(lefti, asc);
	else
		int bp = 0; //rekursive left beendet

	if (right.size() > 1)
		right = quickSort(right, asc);
	else
		int bp = 0; //rekursive right beendet

	//reconcile arrays
	array.clear();
	int ix = 0;
	for (int i = 0; i < lefti.size(); i++)
		{
		array[ix].push_back(lefti[i][0]);
		array[ix].push_back(lefti[i][1]);
		ix++;
		}

	for (int i = 0; i < right.size(); i++)
		{
		array[ix].push_back(right[i][0]);
		array[ix].push_back(right[i][1]);
		ix++;
		}
		
	return array;
	}
//---------------------------------------------------------------------------